---
# tasks file for mqtt_container
- name: Download the docker container image
  docker_image:
    name: "{{ item.name }}"
    source: pull
    tag: "{{ item.version }}"
  become: yes
  when: ansible_facts['os_family'] == "Debian"
  loop: "{{ image_name }}"

- name: Download the podman container image
  podman_image:
    name: "{{ item.name }}"
    tag: "{{ item.version }}"
  become: yes
  when: ansible_facts['os_family'] == "RedHat"
  loop: "{{ image_name }}"


- name: Copy the docker start service file for launch
  template:
    src: "docker.{{ item }}.service.j2"
    dest: "/etc/systemd/system/{{ item }}.service"
    mode: "0644"
  become: true
  notify: daemon_reload
  when: ansible_facts['os_family'] == "Debian"
  loop: "{{ service_name }}"

- name: Inspect if the docker container is running already
  shell: "docker ps -a"
  become: true
  tags: shell
  register: docker_status
  when: ansible_facts['os_family'] == "Debian"


- name: Create a docker container of Mosquitto first
  shell: "docker run -d -p {{ inventory_hostname }}:1883:1883 --name {{ mqtt_container }} {{ image_name.0.name }}:{{ image_name.0.version }}  && podman stop {{ mqtt_container }}"
  become: true
  change_when: false
  when: ansible_facts['os_family'] == "Debian" and docker_status.stdout.find('mosquitto') == -1

- name: Create a docker container of Plantuml first
  shell: "docker run -d -p {{ inventory_hostname }}:8080:8080 --name {{ plantuml_container }} {{ image_name.1.name }}:{{ image_name.1.version }} && podman stop {{ plantuml_container }}"
  become: true
  change_when: false
  when: ansible_facts['os_family'] == "Debian" and docker_status.stdout.find('plantuml') == -1

- name: Inspect if the podman container is running already
  shell: "podman ps -a"
  become: true
  tags: shell
  register: container_status
  when: ansible_facts['os_family'] == "RedHat"

- name: Create a podman container of Mosquitto first
  shell: "podman run -d -p {{ inventory_hostname }}:1883:1883 --name {{ mqtt_container }} {{ image_name.0.name }}:{{ image_name.0.version }}  && podman stop {{ mqtt_container }}"
  become: true
  change_when: false
  when: ansible_facts['os_family'] == "RedHat" and container_status.stdout.find('mosquitto') == -1

- name: Create a podman container of Plantuml first
  shell: "podman run -d -p {{ inventory_hostname }}:8080:8080 --name {{ plantuml_container }} {{ image_name.1.name }}:{{ image_name.1.version }} && podman stop {{ plantuml_container }}"
  become: true
  change_when: false
  when: ansible_facts['os_family'] == "RedHat" and container_status.stdout.find('plantuml') == -1

- name: Copy the file into the appropriate location
  template:
    src: "podman.{{ item }}.service"
    dest: "/etc/systemd/system/{{ item }}.service"
    remote_src: yes
    mode: "0644"
  become: yes
  when: ansible_facts['os_family'] == "RedHat" and container_status.stdout.find('mqtt_name') == -1
  notify: daemon_reload
  loop:
    - "{{ mqtt_container }}"
    - "{{ plantuml_container }}"

- name: FLush Handlers
  meta: flush_handlers

- name: Start the service of container
  service: 
    name: "{{ item }}"
    state: started
    enabled: true
  become: true
  loop: 
    - "{{ mqtt_container }}"
    - "{{ plantuml_container }}"

- name: Adding the firewall rule for Redhat
  firewalld:
    port: "{{  item }}/tcp"
    state: enabled
    permanent: yes
    immediate: yes
  when: ansible_facts['os_family'] == "RedHat"
  become: true
  loop:
      - 1883
      - 9001

- name: Firewall rule for Ubuntu System
  ufw:
    port: "{{ item }}"
    proto: tcp
    rule: allow
  when: ansible_facts['os_family'] == "Debian"
  become: true
  loop:
      - 1883
      - 9001

